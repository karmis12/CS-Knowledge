1.소프트웨어 생명주기
1-1. 폭포수 모형☆
-고전적 생명 주기 모형
-선형 순차적 모형
-개발 중간에 변경이 용이하지 않음
순서: 타당선검토 - 계획 - 요구 분석 - 설계 - 구현(코딩) - 테스트(검사) - 유지보수
암기: 분설구테유

1-2. 프로토타입 모형☆
-견본품을 만들어 최종 결과물을 예측하는 모형
-개발 중간에 요구사항의 변경이 용이

1-3.나선형 모형(=점진적 모형)☆
-폭포수, 프로토타입의 장점에 위험 분석 기능을 추가한 모형
순서: 계획 및 정의 - 위험 분석 - 공학적 개발 - 고객 평가
암기: 계위개고

1-4.애자일 모형☆☆
-애자일은 민첨함, 기민함 의미
-변화에 유연하게 대응
-일정한 주기를 반복하면서 개발과정 진행
-절차와 도구보다 고객과의 소통에 초점을 맞춤
ex. XP, 스크럼, 칸반, 크리스탈, 린
암기: 엑스칸크린

2. 스크럼 기법
-팀원 스스로가 스크럼 팀 구성
-스프런트는 2~4주 정도의 기간으로 진행

2-1 구성원
1. 제품 책임자(PO;product owner)☆
-요구사항이 담긴 백로그를 작성하는 주체
-백로그에 대한 우선순위 지정, 이해관계자들의 의견을 종합
=백로그 관련 일처리랑 제품제작자와 소비자를 연결해주는 사람이라고 생각하면됨

2. 스크럼 마스터(SM;Scrum Master)
-일일 스크럼 회의 주관
-팀원들을 통제하는 것이 목표가 아님. 조언하는 역할

3. 개발팀(DT;Development Team)
-제품 책임자와 스크럼 마스터를 제외한 모든 팀원
-최대인원 7~8

2-2 스크럼 개발 프로세스
- 스프린트 계획 회의 -> 스프린트 -> 일일 스크럼 -> 스크럼 검토 회의 -> 스프린트 회고
암기: 계스일검회

3.XP기법
3-1. XP(eXtreme Programming)의 핵심가치☆
-용기, 단순성, 의사소통, 피드백, 존중
암기: 용단의피존

3-2.XP의 기본원리
-Whole Team(전체팀) -Small Releases(소규모 릴리즈)
-Test-Driven Development(테스트 주도 개발) -Continuous Integration(계속적인 통합)
-Collective Ownership(공동 소유권) -Pair Programming(짝 프로그래밍)
-Design Improvement(디자인 개선) 또는 Refactoring(리팩토링)
암기:전소테 계공짝디

4.개발 기술 환경 파악
4-1.운영체제(OP;operating system)
-컴퓨터 자원들을 효율적으로 관리하며 사용자가 컴퓨터를 편리하고 효율적으로
사용할 수 있도록 환경을 제공하는 소프트웨어!이다.
ex. Windows, UNIX, Linux, Mac OS | ios, Android 등등

4-1-2.요구사항 식별 시 고려사항
-가용성, 성능, 기술지원, 구축 비용, 주변기기
암기:가성기구주

4-2.미들웨어(Middleware)
-운영체제와 응용 프로그램 사이에서 추가적인 서비스를 제공하는 소프트웨어

4-3.데이터베이스 관리 시스템(DBMS; Database Management System)
-사용자와 데이터베이스 사이에서 정보를 생성하고  DB를 관리하는 소프트웨어
-데이터베이스의 구성, 접근 방법, 유지관리에 대한 모든 책임을 짐
-JDBC(Java Database Connectivity, 자바), ODBC(Open Database Connectivity, 응용프로그램)
-Oracle, MySQL, SQLite, MongoDB, Redis 등등
-고려사항: 가용성, 성능, 기술지원, 구축비용, 상호 호환성
암기:가성기구호

4-4.웹 어플리케이션 서버(WAS; web application server)☆
-정적인 콘텐츠를 처리하는 웹서버랑 반대되는 개념
-동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어
-데이터 접근, 세션 관리, 트랜잭션 관리 등을 위한 라이브러리 제공
-Tomcat, JEUS, WebLogic, JBOSS, Jetty, Resin 등등
-고려사항: 가용성, 성능, 기술 지원, 구축 비용
암기:가성기구

4-5.오픈소스
-누구나 제한없이 사용할 수 있도록 무료로 사용할 수 있게 공개한것
-고려사항: 라이선스의 종류, 사용자 수 , 기술의 지속 가능성
암기:라사지

5. 요구사항 정의

5-1.기능 요구사항
-기능, 입력, 출력, 저장, 수행 등등

5-2. 비기능 요구사항
-성능, 품질, 제약사항, 호환성, 보안 등등

5-3. 요구사항 개발 프로세스☆
-도출/추출 -> 분석 -> 명세 -> 확인/검증
#도분명확 / 추분명검

5-4. 요구사항 분석 기법☆
-요구사항 분류, 개념 모델링, 요구사항 할당, 요구사항 협상, 정형 분석

5-5. 요구사항 확인 기법☆☆
-요구사항 검토, 프로토타이핑, 모델 검증, 인수 테스트(알파, 베타 테스트)
#검프모인

6.UML☆☆☆
6-1.UML(Unified Modeling Language)의 구성요소
-사물, 관계, 다이어그램
#사관다

6-2. 사물(Things)
-구조, 행동, 그룹, 주해{사물}
#구행그주

6-3. 관계 ☆☆
- 연관(ㅡ), 집합(◇), 포함(◆), 일반화(ㅡ▷), 의존(-->), 실체화(--▷) {관계}
#연집포 일의실

6-4. 구조적, 정적 다이어그램 ☆☆
-클래스, 객체, 컴포넌트, 배치, 복합체 구조, 패키지
-컴포넌트, 배치 다이어그램은 구현 단계에서 사용되는 다이어그램

6-5. 행위, 동적 다이어그램 ☆☆
-유스케이스(사용사례), 시퀀스(순차), 
커뮤니케이션(협업), 상태, 활동,
상호작용 개요, 타이밍
#유시커 상활호타

7.사용자 인터페이스
7-1.UI의 구분☆
-CLI(command lone interface): 텍스트 형태로 이뤄진 인터페이스
-GUI(Graphical User Interface): 마우스로 선택해 작업을 하는 그래픽 환경의 인터페이스
-NUI(Natural User Interface):사용자의 말이나 행동으로 기기를 조작하는 인터페이스
-VUI(Voice User Interface):사람의 음성으로 기기를 조작하는 인터페이스
-OUL(Organic User Interface):모든 사물과 사용자간의 상호작용을 위한 인터페이스

7-2.UI의 기본원칙☆☆
-직관성: 누구나 쉽게 이해하고 사용할 수 있어야함
-유효성: 사용자의 목적을 정확하고 완벽하게 달성해야 함
-학습성: 누구나 쉽게 배우고 익힐 수 있어야함
-유연성: 사용자의 요구사항을 최대한 수용하고 실수를 최소화해야함

7-3.웹의 3요소
-웹 표준
-웹 접근성
-웹 호환성

7-4. UI 설계 도구☆
-와이어프레임(WireFrame):레이아웃을 협의하거나 공유하기 위해 사용
-스토리보드(StoryBoard): 최종적으로 참고하는 작업 지침서, 작업 산출물(디스크립션)
-프로토타입(Prototype):인터랙션을 적용해 실제 구현된 것처럼 테스트가 가능한 동적인 모형
-목업(MockUP):실제 화면과 유사한 정적인 모형
-유스케이스(Use Case):사용자 측면 요구사항을 다이어그램 형식으로 묘사

7-5. 프로토타입
-장점: 사용자를 설득하고 이해시키기 쉬움 / 개발시간을 줄일 수 있음 / 사전오류발견가능
-단점: 반복적인 개선 및 보완 작업으로 인한 작업시간 증가 및 자원 소모 / 부분적인 프로토타이핑으로 인한 중요한 작업 생략가능성
#페이퍼 프로토타입, 디지털 프로토타입, HTML/CSS

7-6. UI 시나리오 문서 요건
-이해성: 누구나 쉽게 이해할 수 있도록 설명
-완전성: 최대한 상세하게 기술
-일관성: 일관성 유지
-가독성: 표준화된 템플릿 등을 활용하여 문서를 쉽게 읽을 수 있도록 해야함
-수정 용이성: 수정 및 개선이 쉬워야 함
-추적 용이성: 변경사항에 대하여 쉽게 추적할 수 있어야함

7-7. 기타
-HCI(Human Computer Interaction or Interface): {사람}과 {컴퓨터}의 {상호작용}을 연구해서 사람이 컴퓨터를 편리하게 사용하도록 만드는 학문

- UX(User Experience): 사용자가 시스템이나 서비스를 이용하면서 느끼고 생각하는 총체적인 경험

# 주관성(Subjectivity), 정황성(Contextuality), 총체성(Holistic)
- 감성공학: 1류; 인간의 감성 / 2류; 심리적 기능 / 3류; 공학적 및 수학적 모델, 객관적

8. 품질 요구사항☆
8-1.국제 제품 품질 표준☆
- ISO/IEC 9126
- ISO/IEC 12119
- ISO/IEC 14598
- ISO/IEC 25000: SW 품질 평가 통합 모델, SQuaRE로도 불리며 위 3개 표준을 통합
품질 관리(2500n), 품질 모델(2501n), 품질 측정(2502n), 품질 요구(2503n), 품질 평가(2504n)

8-2.ISO/IEC 9126☆☆
-기능성: 요구사항을 정확하게 만족하는 기능을 제공하는가?
#적절성(적합성), 정확성, 상호 운용성, 보안성, 호환성

-신뢰성: 요구된 기능을 정확하고 일관되게 요류없이 수행가는가?
#성숙성, 결함 허용성, 회복성

-사용성: 사용자가 정확하게 이해하고 사용하는가?
#이해성, 학습성, 운용성, 친밀성

-효율성: 할당된 시간동안 한정된 자원으로 얼마나 빨리 처리하는가?
#시간 효율성, 자원 효율성

-유지 보수성: 환경의 변화에 소프트웨어를 쉽게 개선, 확장, 수정할 수 있는가?

-이식성: 소프트웨어를 다른 환경에서도 쉽게 적용할 수 있는가?
#적용성, 설치성, 대체성, 공존성

8-3. ISO/IEC 14598
-반복성, 재현성, 공정성, 객관성
#반재공객

8-4. 국제 프로세스 품질 표준
- ISO/IEC 9001
- ISO/IEC 12207: 기본 프로세스, 조직 프로세스, 지원 프로세스
#기조지
- ISO/IEC 15504(SPICE): 불완전 → 수행 → 관리 → 확립 → 예측 → 최적화
#불수관 확예최
- CMMI  i(Capability Maturity Model Integration): 조직차원의 성숙도를 평가하는 단계별 표현과 프로세스 영역별 능력도를 평가하는 연속적 표현이 있음

9.소프트웨어 아키텍처☆





